SQL 

1. SQL Commands
        • DDL (Data Definition Language)
                i. CREATE Table
                ii. ALTER Table
                iii. DROP Table
                iv. TRUNCATE Table
        • DML (Data Manipulation Language)
                i. INSERT 
                ii. UPDATE
                iii. DELETE
        • DCL (Data Control Language)
                i. GRANT
                ii. REVOKE
        • TCL (Transaction Control Language)
                i. COMMIT
                ii. ROLLBACK
                iii. SAVEPOINT
        • DQL (Data Query Language) 
                i. SELECT
2. Different SELECT Query functionalities:
        • SQL Operators
                i. Logical Operators
                ii. Comparison Operators
                iii. Arithmetic Operators
        • CASE Statement
        • Two ways of writing SQL Queries
                i. Using comma separator
                ii. Using JOIN
        • UNION & UNION ALL Operators
        • GROUP BY Statement
                i. HAVING Clause
        • Subquery
        • Aggregate Functions
                i. COUNT
                ii. AVG
                iii. MIN
                iv. MAX
                v. SUM
        • SQL JOINS
                i. INNER JOIN
                ii. OUTER JOIN
                        1. LEFT OUTER JOIN
                        2. RIGHT OUTER JOIN
                        3. FULL OUTER JOIN

-- CREATE TABLE STAFF
-- (
-- 	STAFF_ID VARCHAR(20),
-- 	STAFF_TYPE VARCHAR(30),
-- 	SCHOOL_ID VARCHAR(20),
-- 	FIRST_NAME VARCHAR(100) NOT NULL,
-- 	LAST_NAME VARCHAR(100) NOT NULL,
-- 	AGE INT,
-- 	DOB DATE,
-- 	GENDER VARCHAR(10) CHECK (GENDER IN ('M','F')),
-- 	JOIN_DATE DATE,
-- 	ADDRESS_ID VARCHAR(20)
-- )

-- DDL COMMANDS

-- SELECT * FROM STAFF;
-- INSERT INTO STAFF (STAFF_ID,STAFF_TYPE,SCHOOL_ID,FIRST_NAME,LAST_NAME,AGE,DOB,GENDER,JOIN_DATE,ADDRESS_ID)
-- VALUES('STF1002','NON-TEACHING','1001','SHAMLA','DEVI','56',TO_DATE('03/09/1964','DD/MM/YYYY'),'F',TO_DATE('05/06/2015','DD/MM/YYYY'),'ADR1001');

-- INSERT INTO STAFF (STAFF_ID,STAFF_TYPE,SCHOOL_ID,FIRST_NAME,LAST_NAME,AGE,DOB,GENDER,JOIN_DATE,ADDRESS_ID)
-- VALUES('STF1004','TEACHING','1002','VIMAL','DEVU','67',TO_DATE('02/05/1963','DD/MM/YYYY'),'F',TO_DATE('01/04/2015','DD/MM/YYYY'),'ADR1002');

-- INSERT INTO STAFF (STAFF_ID,STAFF_TYPE,SCHOOL_ID,FIRST_NAME,LAST_NAME,AGE,DOB,GENDER,JOIN_DATE,ADDRESS_ID)
-- VALUES('STF1001','NON-TEACHING','1003','KANTA','BAI','36',TO_DATE('13/02/1960','DD/MM/YYYY'),'F',TO_DATE('05/05/2012','DD/MM/YYYY'),'ADR10024');

-- INSERT INTO STAFF (STAFF_ID,STAFF_TYPE,SCHOOL_ID,FIRST_NAME,LAST_NAME,AGE,DOB,GENDER,JOIN_DATE,ADDRESS_ID)
-- VALUES('STF1005','TEACHING','1012','SUKH','DEV','45',TO_DATE('13/12/1956','DD/MM/YYYY'),'M',TO_DATE('15/02/2013','DD/MM/YYYY'),'ADR1012');

-- INSERT INTO STAFF (STAFF_ID,STAFF_TYPE,SCHOOL_ID,FIRST_NAME,LAST_NAME,AGE,DOB,GENDER,JOIN_DATE,ADDRESS_ID)
-- VALUES('STF1003','NON-TEACHING','1015','SUNIL','SHATTY','57',TO_DATE('13/09/1962','DD/MM/YYYY'),'M',TO_DATE('15/12/2012','DD/MM/YYYY'),'ADR1023');

-- SELECT * FROM STAFF


-- OTHER DDL COMMANDS

-- ALTER TABLE STAFF DROP COLUMN JOIN_DATE; -- DROP A COLUMN
-- ALTER TABLE STAFF ALTER COLUMN AGE TYPE VARCHAR(5); -- CHANGE TTH EDATA TYPE OF A COLUMN
-- ALTER TABLE STAFF RENAME TO STAFF_NEW; RENAME THE TABLE
-- ALTER TABLE STAFF_NEW RENAME COLUMN FIRST_NAME TO FULL_NAME; RENAME THE COLUMN
-- ALTER TABLE STAFF_NEW ADD CONSTRAINT UNQ_STF_ID UNIQUE (STAFF_ID); --ADD A CONSTRAINT T EXISTING TABLE
-- DROP TBALE STAFF_NEW -- DELETE A TABLE

-- SELECT * FROM STAFF_NEW;



-- DML COMMANDS

-- CREATE TABLE ADDRESS
-- (
-- 	ADDRESS_ID VARCHAR(10) PRIMARY KEY ,
-- 	STREE VARCHAR(15),
-- 	CITY VARCHAR(20),
-- 	STATE VARCHAR(20),
-- 	COUNTRY VARCHAR(20)
-- )

-- SELECT * FROM ADDRESS

-- INSERT INTO ADDRESS (ADDRESS_ID,STREE,CITY,STATE,COUNTRY)
-- VALUES('ADR1011','4490','BATON ROUGE','LOUISIANA','UNITED STATES');

-- INSERT INTO ADDRESS (ADDRESS_ID,STREE,CITY,STATE,COUNTRY)
-- VALUES('ADR1012','0290','RICHMOND','VIRGINA','UNITED STATES');

-- INSERT INTO ADDRESS
-- VALUES('ADR1013','966','DALLAS','TEXAS','UNITED STATES'),
-- ('ADR1014','234','ROANOKE','VIRGINIA','UNITED STATES'),
-- ('ADR1015','767','ATLANTA','GEORGIA','UNITED STATES'),
-- ('ADR1016','457','SEATTLE','WASHINGTON','UNITED STATES');  -- INSERT MULTIPLE RECORDS USING SINGLE INSERT STATEMENT


-- SELECT * FROM ADDRESS

-- UPDATE ADDRESS
-- SET COUNTRY = 'MALAYSIA'
-- WHERE ADDRESS_ID = 'ADR1015';

-- UPDATE ADDRESS
-- SET COUNTRY = 'INDIA', CITY='DELHI'
-- WHERE ADDRESS_ID ='ADR1011' --UPDATE MULTIPLE COLUMNS AT ONCE

-- SELECT * FROM ADDRESS

-- DELETE FROM ADDRESS WHERE COUNTRY='MALAYSIA'

-- DELETE FROM ADDRESS --THIS WILL DELETE EVERY RECORD FROM TABLE , TABLE WILL EXIST BUT THERE IS NO DATA IN THE TABLE



-- CASE STATEMENT IN SQL
-- IT IS SIMILAR TO IF ELSE CONDITION BASICALLY BASED ON CERTAIN IN COLUMN WE CAN DISPLAY USER DEFINED VALUES
-- FOR EXAPMLE IF SALARY >=10000 RETURN HIGH SALARY ,ELIF SALARY BETWEEN 5000 AND 10000 REPREST AVERAGE SALARY OTHERWISE LOW SALARY
-- SYNATX IS CASE CONDITION VALUE


SELECT STAFF_ID, SALARY,
CASE WHEN SALARY >= 10000 THEN 'HIGH SALARY'
     WHEN SALARY BETWEEN 5000 AND 10000 THEN 'AVERAGE SALARY'
     WHEN SALARY < 5000 THEN 'TOO LOW'
END AS RANGE --COLUMN NAME
FROM STAFF_SALARY
ORDER BY 2 DESC --ORDER BY 2 MEANS SORT ON THE BASIS OF SECOND COLUMN THAT IS SALARY IF WE WRITE AS ORDER BY 1 IT WILL SORT ON THE BASIS OF FIRST COLUMN


-- JOINS (WAYS TO WRITE SQL QUERIES)
-- ALIAS IS A NICKNAME GIVEN TO TABLE WRITTEN AS "T1.COLUMN1 AS T1"

-- 1) USING JOIN KEYWORD BETWEEN TABLES IN FROM CLAUSE
-- SELECT T1.COLUMN1 AS C1, T1.COLUMN2 AS C2, T21COLUMN3 AS C3      --C1,C2,C3 ARE ALIASE TO THE COLUMN
-- FROM TABLE1 AS T1
-- JOIN TABLE2 AS T2 ON T1.C1 =T2.C1 AND T1.C2 = T2.C2        -- T1, T2 ARE ALIASES FOR TABLE NAMES  

-- -- 2) USING COMMA "," BETWEEN TABLES IN FROM CLAUSE
-- SELECT T1.COLUMN1 AS C1, T1.COLUMN2 AS C2, T1.COLUMN3 AS C3 
-- FROM TABLE1 AS T1 , TABLE2 AS T2
-- WHERE T1.C1 = T2.C1 AND T1.C2=T2.C1


-- FETCH ALL THE CLASS NAME WHERE ENGLISH IS TAUGHT AS SUBJECT
-- SELECT CLASS_NAME
-- FROM SUBJECTS SUB
-- JOIN CLASSES CLS ON SUB.SUBJECT_ID=CLS.SUBJECT_ID
-- WHERE SUBJECT_NAME='ENGLISH';


-- FETCH THE FULL NAME OF ALL STAFFS WHO TEACH ENGLISH
-- SELECT DISTINCT(STF.FIRST_NAME||' '||STF.LAST_NAME) AS FULL_NAME
-- FROM SUBJECTS SUB
-- JOIN CLASSES CLS ON CLS.SUBJECT_ID=SUB.SUBJECT_ID
-- JOIN STAFF STF ON CLS.TEACHER_ID=STF.STAFF_ID
-- WHERE SUB.SUBJECT_NAME='ENGLISH'


-- FETCH ALL STAFFS WHO TEACH GRADE 1,2,3 AND ALSO FETCH ALL THE NON TEACHING STAFF
SELECT STF.STAFF_TYPE,
     (STF.FIRST_NAME||' '||STF.LAST_NAME) AS FULL_NAME,
	 STF.AGE,
	 (CASE WHEN STF.GENDER='M' THEN 'MALE'
	       WHEN STF.GENDER='F' THEN 'FEMALE'
	 END) AS GENDER,
	 STF.JOIN_DATE
FROM STAFF STF
JOIN CLASSES CLS ON CLS.TEACHER_ID=STF.STAFF_ID
WHERE STF.STAFF_TYPE = 'TEACHING'
AND CLS.CLASS_NAME IN ('GR1','GR2','GR3')
UNION
SELECT STAFF_TYPE,
      (FIRST_NAME||' '||LAST_NAME) AS FULL_NAME,
	  AGE,
      (CASE WHEN GENDER='M' THEN 'MALE'
	        WHEN GENDER='F' THEN 'FEMALE'
      END) AS GENDER,
	  JOIN_DATE
FROM STAFF
WHERE STAFF_TYPE='NON-TEACHING';



-- SIMPLE SQL QUERIES


/* dIFFERENT SQL OPERATORS:::    = , < , > , <= , >= , <> , != , BETWEEN, ORDER BY, IN, NOT IN, LIKE, ALIASE, DISTINCT, LIMIT, CASE:
COMARISON OPERATORS:   = , <> , != , > , < , >= , <=
ARITHMETIC OPERATORS:  + , - , * , / , %
LOGICAL OPERATORS:  AND, OR, NOT, IN, BETWEEN, LIKE ETC. */

-- <> THIS SYMBOL IS USED TO FETCH ALL RECORDS EXCEPT THE CHOOSEN RECORS
-- <> AND != ARE SAME
-- ORDER BY CLAUSE IS USED TO SORT THE COLUMNS WE CAN MENTION DESC FOR DESCENDING ORDER AND BY DEFAULT IT WILL RESULT IN ASECENDING ORDER
-- LIKE OPERATOR IS USED TO MTCH THE START AND END ALPHABET OF A WORD 'S%' MEANS WORD START WITH S AND "%C" MEANS THE WORD ENDS WITH C
-- IN SQL IT IS NOT MANDATORY TO HAVE FROM CLOUSE IN A QUERY SO IF WE WRITE 'SELECT (5+2)' IT WILL RETURN 7 AND TO GIVE A COLUMN NAME FOR 7 WE CAN WRITE AS 'SELECT (5+2) AS TOTAL'
-- IN ORDER TO GET UNIQUE VALUES FROM A TABLE WE USE DISTINCT
-- LIMIT CLAUSE IS USED TO RETURN LIMITED NUMBER OF ROWS IN A TABLE



-- CREATE TABLE STUDENTS
-- (
-- 	ID VARCHAR(10),
-- 	FIRST_NAME VARCHAR(10),
-- 	LAST_NAME VARCHAR(15),
-- 	GENDER VARCHAR(10) CHECK (GENDER IN ('M','F')),
-- 	AGE INT,
-- 	DOB DATE
-- )

-- SELECT * FROM STUDENTS

-- INSERT INTO STUDENTS
-- VALUES('STD1001','LINDY','CONNELL','M','6',TO_DATE('01/05/2014','DD/MM/YYYY')),
-- 	  ('STD1002','MADISON','WALDER','M','6',TO_DATE('12/07/2014','DD/MM/YYYY')),
-- 	  ('STD1003','MARVE','SHEABER','M','6',TO_DATE('18/03/2014','DD/MM/YYYY')),
-- 	  ('STD1004','JESSELYN','GREATEREX','F','6',TO_DATE('11/06/2014','DD/MM/YYYY')),
-- 	  ('STD1005','LEIGH','KIPLING','M','6',TO_DATE('23/09/2014','DD/MM/YYYY'))

-- SELECT * FROM STUDENTS

-- SELECT ID,FIRST_NAME FROM STUDENTS; -- TO FETCH MULTIPLE COLUMNS


-- CREATE TABLE SCHOOL
-- (
-- 	SCHOOL_ID VARCHAR(10),
-- 	SCHOOL_NAME VARCHAR(20),
-- 	EDUCATION_BOARD VARCHAR(5),
-- 	ADDRESS VARCHAR(50)
-- )

-- INSERT INTO SCHOOL 
-- VALUES('SCH1001','NOBLE SCHOOL','CBSE','ADR1001')

-- SELECT * FROM SCHOOL

-- CREATE TABLE SUBJECTS
-- (
-- 	SUBJECT_ID VARCHAR(10),
-- 	SUBJECT_NAME VARCHAR(20)
-- )


-- INSERT INTO SUBJECTS
-- VALUES('SUB1001','MATHEMATICS'),
-- ('SUB1009','SCIENCE'),
-- ('SUB1003','SOCIAL STUDIES'),
-- ('SUB1008','ENGLISH'),
-- ('SUB1004','ARTS'),
-- ('SUB1006','COMPUTER')

-- SELECT * FROM SUBJECTS


-- CREATE TABLE STAFF_SALARY
-- (
-- 	STAFF_ID VARCHAR(10),
-- 	SALARY INT,
-- 	CURRENCY VARCHAR(5)
-- )

-- INSERT INTO STAFF_SALARY
-- VALUES('STF1004','150000','USD'),
-- ('STF1005','150000','USD'),
-- ('STF1002','8000','USD'),
-- ('STF1003','70000','USD'),
-- ('STF1001','11000','USD')

-- SELECT * FROM STAFF_SALARY

-- CREATE TABLE CLASSES
-- (
-- 	CLASS_ID VARCHAR(10),
-- 	CLASS_NAME VARCHAR(5),
-- 	SUBJECT_ID VARCHAR(10),
-- 	TEACHER_ID VARCHAR(10)
-- )


-- INSERT INTO CLASSES
-- VALUES('CL1001','GR1','SUB1008','STF1001'),
-- ('CL1002','GR1','SUB1009','STF1002'),
-- ('CL1003','GR1','SUB1004','STF1003'),
-- ('CL1004','GR2','SUB1008','STF1004'),
-- ('CL1005','GR2','SUB1010','STF1005')

-- SELECT * FROM CLASSES

-- OPERATIONS ON QUERIES

-- SELECT * FROM SUBJECTS WHERE SUBJECT_NAME = 'MATHEMATICS';
-- SELECT * FROM STAFF_SALARY WHERE SALARY <=10000;
-- SELECT * FROM STAFF_SALARY ORDER BY SALARY
-- SELECT * FROM STAFF_SALARY WHERE SALARY BETWEEN 5000 AND 10000 ORDER BY SALARY;
-- SELECT * FROM SUBJECTS WHERE SUBJECT_NAME IN ('MATHEMATICS','SCIENCE','ARTS')
-- SELECT * FROM SUBJECTS WHERE SUBJECT_NAME NOT IN ('MATHEMATICS','SCIENCE','ARTS')
-- SELECT * FROM SUBJECTS WHERE SUBJECT_NAME LIKE 'S%'  --MEANS SUBJECT NAME START WITH S
-- SELECT * FROM SUBJECTS WHERE SUBJECT_NAME LIKE '%C'  --SUBJECT NAME ENDS WITH C
-- SELECT * FROM STAFF_NEW WHERE STAFF_ID = '5' AND GENDER='F'
-- SELECT (5+2) --THIS WILL RETURN SUM OF 5+2
-- SELECT (5+2) AS TOTAL -- THIS WILL ADD COLUMN NAME  
-- SELECT STAFF_TYPE FROM STAFF_NEW
-- SELECT DISTINCT STAFF_TYPE FROM STAFF_NEW
-- SELECT STAFF_TYPE FROM STAFF_NEW LIMIT 5



-- GROUP BY
-- CREATE TABLE STUDENT_CLASSES
-- (
-- 	STUDENT_ID VARCHAR(10),
-- 	CLASS_ID VARCHAR(10)
	
-- )

-- INSERT INTO STUDENT_CLASSES
-- VALUES
-- ('STD1001','CLS1001'),
-- ('STD1002','CLS1001'),
-- ('STD1003','CLS1001'),
-- ('STD1004','CLS1001'),
-- ('STD1005','CLS1001'),
-- ('STD1006','CLS1001'),
-- ('STD1007','CLS1001'),
-- ('STD1008','CLS1001'),
-- ('STD1009','CLS1001'),
-- ('STD1010','CLS1001'),
-- ('STD1011','CLS1001'),
-- ('STD1012','CLS1001'),
-- ('STD1013','CLS1001'),
-- ('STD1014','CLS1001'),
-- ('STD1015','CLS1001'),
-- ('STD1016','CLS1001'),
-- ('STD1017','CLS1001'),
-- ('STD1018','CLS1001'),
-- ('STD1019','CLS1001'),
-- ('STD1020','CLS1001'),
-- ('STD1021','CLS1001'),
-- ('STD1022','CLS1001'),
-- ('STD1023','CLS1001'),
-- ('STD1024','CLS1001'),
-- ('STD1025','CLS1002'),
-- ('STD1026','CLS1002'),
-- ('STD1027','CLS1002'),
-- ('STD1028','CLS1002'),
-- ('STD1029','CLS1002'),
-- ('STD1030','CLS1002'),
-- ('STD1031','CLS1002'),
-- ('STD1032','CLS1002'),
-- ('STD1033','CLS1002'),
-- ('STD1034','CLS1002'),
-- ('STD1035','CLS1002'),
-- ('STD1036','CLS1002'),
-- ('STD1037','CLS1002'),
-- ('STD1038','CLS1002'),
-- ('STD1039','CLS1002'),
-- ('STD1040','CLS1002'),
-- ('STD1041','CLS1002'),
-- ('STD1042','CLS1002'),
-- ('STD1043','CLS1002'),
-- ('STD1044','CLS1002'),
-- ('STD1045','CLS1002'),
-- ('STD1046','CLS1002'),
-- ('STD1047','CLS1002'),
-- ('STD1048','CLS1002'),
-- ('STD1049','CLS1002'),
-- ('STD1050','CLS1002')


-- SELECT * FROM STUDENT_CLASSES


-- COUNT NUMBER OF STUDNETS IN EACH CLASS
-- SELECT SC.CLASS_ID, COUNT(1) AS "NO OF STUDENTS"
-- FROM STUDENT_CLASSES SC
-- GROUP BY SC.CLASS_ID
-- ORDER BY SC.CLASS_ID

-- MORE THAN 25 STUDENT IN EACH CLASS
-- SELECT SC.CLASS_ID, COUNT(1) AS "NO OF STUDENTS"
-- FROM STUDENT_CLASSES SC
-- GROUP BY SC.CLASS_ID
-- HAVING COUNT(1)>25
-- ORDER BY SC.CLASS_ID


-- PARENT WITH MORE THAN 1 KID IN A SCHOOL
-- SELECT PARENT_ID, COUNT(1) AS "NO. OF KIDS"
-- FROM STUDENT_PARENT 
-- GROUP BY PARENT_ID
-- HAVING COUNT(1)>1




-- SUBQUERY : QUERY WRITTEN INSIDE A QUERY

-- CREATE TABLE PARENT
-- (
-- 	STUDENT_ID VARCHAR(10),
-- 	PARENT_ID VARCHAR(10)
-- )


-- INSERT INTO PARENT
-- VALUES('STD1001','P0001'),
-- ('STD1002','P0001'),
-- ('STD1003','P0002'),
-- ('STD1004','P0003'),
-- ('STD1005','P0004'),
-- ('STD1006','P0005'),
-- ('STD1007','P0006'),
-- ('STD1008','P0007'),
-- ('STD1009','P0008'),
-- ('STD1010','P0009'),
-- ('STD1011','P0010'),
-- ('STD1012','P0001'),
-- ('STD1013','P0011'),
-- ('STD1014','P0012'),
-- ('STD1015','P0013'),
-- ('STD1016','P0014'),
-- ('STD1017','P0015'),
-- ('STD1018','P0001'),
-- ('STD1019','P0012'),
-- ('STD1020','P0002'),
-- ('STD1021','P0003'),
-- ('STD1022','P0016'),
-- ('STD1023','P0013'),
-- ('STD1024','P0017'),
-- ('STD1025','P0018'),
-- ('STD1026','P0019'),
-- ('STD1027','P0020'),
-- ('STD1028','P0015'),
-- ('STD1029','P0018'),
-- ('STD1030','P0021'),
-- ('STD1031','P0022'),
-- ('STD1032','P0023'),
-- ('STD1033','P0024'),
-- ('STD1034','P0025'),
-- ('STD1035','P0020'),
-- ('STD1036','P0027'),
-- ('STD1037','P0028'),
-- ('STD1038','P0029'),
-- ('STD1039','P0030'),
-- ('STD1040','P0031'),
-- ('STD1041','P0032'),
-- ('STD1042','P0033'),
-- ('STD1043','P0032'),
-- ('STD1044','P0035'),
-- ('STD1045','P0036'),
-- ('STD1046','P0037'),
-- ('STD1047','P0038'),
-- ('STD1048','P0039'),
-- ('STD1049','P0040'),
-- ('STD1050','P0036')


-- FETCH THE DETAILS OF PARENTS HAVING MORE THAN ONE KIDS GOING TO SCHOOL  -- FOR THIS WE HAVE TO JOIN (STUDENT_PARENT,STUDENTS) TABLE AND (STUDENTS,ADDRESS) TABLES
-- SELECT (P.FIRST_NAME||' '||P.LAST_NAME) AS PARENT_NAME,
--        (S.FIRST_NAME||' '||S.LAST_NAME) AS STUDENT_NAME,
-- 	   S.AGE AS STUDENT_AGE,
-- 	   S.GENDER AS STUDENT_GENDER,
-- 	   (ADR.STREET||', '||ADR.CITY||', '||ADR.STATE||', '||ADR.COUNTRY) AS ADDRESS
-- FROM PARENT P
-- JOIN STUDENT_PARENT SP ON P.ID=SP.PARENT_ID
-- JOIN STUDENTS S ON S.ID=SP.STUDENT_ID
-- JOIN ADDRESS ADR ON P.ADDRESS_ID=ADR.ADDRESS_ID
-- WHERE P.ID IN (SELECT PARENT_ID
-- 			  FROM STUDENT_PARENT SP
-- 			  GROUP BY PARENT_ID
-- 			  HAVING COUNT(1)>1))
-- ORDER BY 1



-- AGGREGATE FUNCTIONS (AVG, MIN, MAX, SUM, COUNT) ::: AGGREGATE FUNCTIONS ARE USED TO PERFORMCALCULATIONS ON A SET OF VALUES

-- AVG 
-- (AVG SALARY PAID TO ALL NON TEACHING STAFF)  --WE CAN DONE IT BY JOINING THE SATFF_SALARY TABLE TO STAFF TABLE
-- SELECT AVG(SS.SALARY) AS AVG_SALARY
-- FROM STAFF_SALARY SS
-- JOIN STAFF STF ON STF.STAFF_ID=SS.STAFF_ID
-- WHERE STF.STAFF_TYPE='NON-TEACHING'


-- SUM
-- TOTAL AMOUNT OF SALARY THAT IS BEING PAID TO ALL THE STAFF
-- SELECT STF.STAFF_TYPE, SUM(SS.SALARY) AS AVG_SALARY
-- FROM STAFF_SALARY SS
-- JOIN STAFF STF ON STF.STAFF_ID=SS.STAFF_ID
-- GROUP BY STF.STAFF_TYPE

-- MIN
-- MINIMUM SALARY OF THE STAFFS
-- SELECT STF.STAFF_TYPE, MIN(SS.SALARY) AS AVG_SALARY
-- FROM STAFF_SALARY SS
-- JOIN STAFF STF ON STF.STAFF_ID=SS.STAFF_ID
-- GROUP BY STF.STAFF_TYPE


-- MAX
-- MAXIMUM SALARY OF STAFFS
-- SELECT STF.STAFF_TYPE, MAX(SS.SALARY) AS AVG_SALARY
-- FROM STAFF_SALARY SS
-- JOIN STAFF STF ON STF.STAFF_ID=SS.STAFF_ID
-- GROUP BY STF.STAFF_TYPE




/*
SQL JOINS 
1) INNER JOIN
  - Inner joins fetches records when there are matching values in both tables.
2) OUTER JOIN
- Left Outer Join
    - Left join fetches all records from left table and the matching records from right table.
	- The count of the query will be the count of the left table.
	- Columns which are fetched from right table and do not have a match will be passed as NULL.
- Right Outer Join
   - Right join fetches all records from right table and the matching records from left table.
   - The count of the query will be the count of the right table.
   - Columns which are fetched from left table and do not have a match will be passed as NULL.
- Full Outer Join
   - Full join always return the matching and non-matching records from both left and right table.
*/

 
 
 
-- INNER JOIN
-- WE CAN WRITE (JOIN) AS WELL AS (INNER JOIN)

-- (ALL PREVIOUS JOINS WE HAVE PERFORMED IN PREVIOUS QUERIES ARE INNER JOIN)  RETURNS ONLY COMMON RECORDS IN BOTH THE TABLES
-- SELECT * FROM STAFF  -- 10 RECORDS
-- SELECT * FROM STAFF_SALARY  --5 RECORDS

-- FETCH ALL STAFF NAME AND SALARY INFO

-- SELECT COUNT(1)
-- FROM STAFF STF
-- JOIN STAFF_SALARY SS ON SS.STAFF_ID = STF.STAFF_ID
-- ORDER BY 1



-- OUTER JOIN 
-- 1) LEFT JOIN

-- SELECT COUNT(1)
-- FROM STAFF STF
-- LEFT JOIN STAFF_SALARY SS ON SS.STAFF_ID=STF.STAFF_ID
-- ORDER BY 1


-- 2) RIGHT JOIN

-- SELECT DISTINCT (STF.FIRST_NAME||' '||STF.LAST_NAME) AS FULL_NAME , SS.SALARY
-- FROM STAFF STF
-- RIGHT JOIN STAFF_SALARY SS ON SS.STAFF_ID=STF.STAFF_ID
-- ORDER BY 1


-- 3) FULL OUTER JOIN

-- SELECT COUNT(1)
-- FROM STAFF STF
-- FULL OUTER JOIN STAFF_SALARY SS ON SS.STAFF_ID=STF.STAFF_ID
-- ORDER BY 1

-- SELECT DISTINCT (STF.FIRST_NAME||' '||STF.LAST_NAME) AS FULL_NAME , SS.SALARY
-- FROM STAFF STF
-- FULL OUTER JOIN STAFF_SALARY SS ON SS.STAFF_ID=STF.STAFF_ID
-- ORDER BY 1






































